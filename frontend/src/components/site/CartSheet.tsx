import { useState } from "react";
import { Minus, Plus, ShoppingCart, Trash2 } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useCart } from "@/contexts/CartContext";
import { useToast } from "@/hooks/use-toast";
import { submitOrderRequest } from "@/lib/api";
import { formatEUR } from "@/lib/utils";

const initialFormState = {
  customerName: "",
  customerPhone: "",
  customerEmail: "",
  customerAddress: "",
  notes: "",
};

export function CartSheet() {
  const {
    items,
    itemCount,
    totalPrice,
    removeItem,
    updateQuantity,
    clearCart,
    isOpen,
    setOpen,
  } = useCart();
  const { toast } = useToast();
  const [formData, setFormData] = useState(initialFormState);
  const [submitting, setSubmitting] = useState(false);

  const handleQuantityChange = (productId: string, delta: number) => {
    const current = items.find((item) => item.product.id === productId);
    if (!current) return;
    const nextQuantity = current.quantity + delta;
    if (nextQuantity <= 0) {
      removeItem(productId);
      return;
    }
    updateQuantity(productId, nextQuantity);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!items.length) return;

    if (!formData.customerName || !formData.customerPhone) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞–∞—Ç –ø–æ–¥–∞—Ç–æ—Ü–∏",
        description:
          "–í–Ω–µ—Å–µ—Ç–µ –≥–∏ –≤–∞—à–µ—Ç–æ –∏–º–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ –¥–∞ —ò–∞ –ø–æ—Ç–≤—Ä–¥–∏—Ç–µ –Ω–∞—Ä–∞—á–∫–∞—Ç–∞.",
        variant: "destructive",
      });
      return;
    }

    setSubmitting(true);
    try {
      const order = await submitOrderRequest({
        customerName: formData.customerName,
        customerPhone: formData.customerPhone,
        customerEmail: formData.customerEmail || undefined,
        customerAddress: formData.customerAddress || undefined,
        notes: formData.notes || undefined,
        items: items.map((item) => ({
          productId: item.product.id,
          quantity: item.quantity,
        })),
      });

      toast({
        title: "–ù–∞—Ä–∞—á–∫–∞—Ç–∞ –µ –∏—Å–ø—Ä–∞—Ç–µ–Ω–∞",
        description: `–ë—Ä–æ—ò –Ω–∞ –±–∞—Ä–∞—ö–µ: ${order.id}. –í–∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º–µ –∑–∞ –¥–æ–≤–µ—Ä–±–∞—Ç–∞! –å–µ –≤–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞–º–µ –∑–∞ –ø–æ—Ç–≤—Ä–¥–∞.`,
      });

      clearCart();
      setFormData(initialFormState);
      setOpen(false);
    } catch (error: any) {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description:
          error?.message ||
          "–ù–µ —É—Å–ø–µ–∞–≤–º–µ –¥–∞ —ò–∞ –∏—Å–ø—Ä–∞—Ç–∏–º–µ –≤–∞—à–∞—Ç–∞ –Ω–∞—Ä–∞—á–∫–∞. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
        variant: "destructive",
      });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Sheet open={isOpen} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="outline" size="sm" className="relative">
          <ShoppingCart className="h-4 w-4" />
          {itemCount > 0 && (
            <span className="absolute -top-2 -right-2 inline-flex h-5 min-w-[20px] items-center justify-center rounded-full bg-primary text-[11px] font-semibold text-primary-foreground px-1">
              {itemCount}
            </span>
          )}
        </Button>
      </SheetTrigger>
      <SheetContent
        side="right"
        className="w-full sm:max-w-xl lg:max-w-2xl flex flex-col gap-4 p-0 sm:p-6"
      >
        <SheetHeader className="px-6 pt-6">
          <SheetTitle className="text-2xl font-semibold tracking-tight">
            –í–∞—à–∞ –∫–æ—à–Ω–∏—á–∫–∞
          </SheetTitle>
          <SheetDescription className="text-sm leading-relaxed">
            –ü–ª–∞—ú–∞—ö–µ—Ç–æ –µ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≥–∏ –∞—Ä—Ç–∏–∫–ª–∏—Ç–µ –∏ –ø–æ—Ç–≤—Ä–¥–µ—Ç–µ —ò–∞
            –Ω–∞—Ä–∞—á–∫–∞—Ç–∞.
          </SheetDescription>
        </SheetHeader>

        <div className="flex-1 overflow-hidden px-0 sm:px-6">
          {items.length === 0 ? (
            <div className="h-full flex flex-col items-center justify-center text-center text-muted-foreground gap-2">
              <ShoppingCart className="h-10 w-10" />
              <p>
                –í–∞—à–∞—Ç–∞ –∫–æ—à–Ω–∏—á–∫–∞ –µ –ø—Ä–∞–∑–Ω–∞. –î–æ–¥–∞—ò—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏ –∑–∞ –¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ.
              </p>
            </div>
          ) : (
            <ScrollArea className="h-full pr-4">
              <div className="space-y-5 pb-2">
                {items.map((item) => {
                  const primaryImage =
                    item.product.primary_image_url ||
                    item.product.image ||
                    item.product.image_url ||
                    null;
                  return (
                    <div
                      key={item.product.id}
                      className="flex flex-col sm:flex-row gap-4 rounded-xl border border-border/60 bg-background/70 p-4 shadow-sm"
                    >
                      <div className="h-24 w-full sm:w-28 sm:h-28 flex-shrink-0 overflow-hidden rounded-lg bg-muted">
                        {primaryImage ? (
                          <img
                            src={primaryImage}
                            alt={item.product.title}
                            className="h-full w-full object-cover"
                          />
                        ) : (
                          <div className="flex h-full w-full items-center justify-center text-3xl">
                            üåø
                          </div>
                        )}
                      </div>

                      <div className="flex flex-1 flex-col gap-3">
                        <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3">
                          <div className="space-y-1">
                            <p className="font-semibold leading-tight text-foreground text-base sm:text-lg">
                              {item.product.title}
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {formatEUR(Number(item.product.price) || 0)} –ø–æ
                              –∞—Ä—Ç–∏–∫–ª
                            </p>
                          </div>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-muted-foreground hover:text-destructive"
                            onClick={() => removeItem(item.product.id)}
                            aria-label="–û—Ç—Å—Ç—Ä–∞–Ω–∏"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>

                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
                          <div className="flex items-center gap-2">
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-8 w-8"
                              onClick={() =>
                                handleQuantityChange(item.product.id, -1)
                              }
                              aria-label="–ù–∞–º–∞–ª–∏ –∫–æ–ª–∏—á–∏–Ω–∞"
                            >
                              <Minus className="h-3 w-3" />
                            </Button>
                            <span className="w-8 text-center text-sm font-medium">
                              {item.quantity}
                            </span>
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-8 w-8"
                              onClick={() =>
                                handleQuantityChange(item.product.id, 1)
                              }
                              aria-label="–ó–≥–æ–ª–µ–º–∏ –∫–æ–ª–∏—á–∏–Ω–∞"
                            >
                              <Plus className="h-3 w-3" />
                            </Button>
                          </div>
                          <span className="text-sm font-semibold text-foreground">
                            {formatEUR(
                              (Number(item.product.price) || 0) * item.quantity
                            )}
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </ScrollArea>
          )}
        </div>

        {items.length > 0 && (
          <div className="border-t border-border/60 bg-muted/20 px-6 py-5 space-y-5">
            <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between text-sm text-muted-foreground">
              <span>–í–∫—É–ø–Ω–æ ({itemCount} –∞—Ä—Ç–∏–∫–ª–∏)</span>
              <span className="text-xl font-semibold text-primary">
                {formatEUR(totalPrice)}
              </span>
            </div>

            <Badge
              variant="outline"
              className="w-full justify-center border-primary text-primary bg-primary/10 py-2"
            >
              –ü–ª–∞—ú–∞—ö–µ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∞
            </Badge>

            <Separator />

            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="cart-name">–ò–º–µ –∏ –ø—Ä–µ–∑–∏–º–µ *</Label>
                <Input
                  id="cart-name"
                  placeholder="–ü—Ä–∏–º–µ—Ä: –ê–Ω–∞ –ê–Ω–∞—Å—Ç–∞—Å–æ–≤–∞"
                  value={formData.customerName}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      customerName: event.target.value,
                    }))
                  }
                  required
                />
              </div>

              <div className="grid gap-2">
                <Label htmlFor="cart-phone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                <Input
                  id="cart-phone"
                  placeholder="–ü—Ä–∏–º–µ—Ä: 070 123 456"
                  value={formData.customerPhone}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      customerPhone: event.target.value,
                    }))
                  }
                  required
                />
              </div>

              <div className="grid gap-2">
                <Label htmlFor="cart-email">–ï-–ø–æ—à—Ç–∞</Label>
                <Input
                  id="cart-email"
                  type="email"
                  placeholder="optional@example.com"
                  value={formData.customerEmail}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      customerEmail: event.target.value,
                    }))
                  }
                />
              </div>

              <div className="grid gap-2">
                <Label htmlFor="cart-address">–ê–¥—Ä–µ—Å–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∞</Label>
                <Input
                  id="cart-address"
                  placeholder="–£–ª. –ü—Ä–∏–º–µ—Ä –±—Ä. 1, –°–∫–æ–ø—ò–µ"
                  value={formData.customerAddress}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      customerAddress: event.target.value,
                    }))
                  }
                />
              </div>

              <div className="grid gap-2">
                <Label htmlFor="cart-notes">–ó–∞–±–µ–ª–µ—à–∫–∞</Label>
                <Textarea
                  id="cart-notes"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –¥–æ—Å—Ç–∞–≤–∞—Ç–∞"
                  value={formData.notes}
                  onChange={(event) =>
                    setFormData((prev) => ({
                      ...prev,
                      notes: event.target.value,
                    }))
                  }
                  rows={3}
                />
              </div>

              <Button type="submit" className="w-full" disabled={submitting}>
                {submitting ? "–°–µ –∏—Å–ø—Ä–∞—ú–∞..." : "–ò—Å–ø—Ä–∞—Ç–∏ –±–∞—Ä–∞—ö–µ –∑–∞ –Ω–∞—Ä–∞—á–∫–∞"}
              </Button>
            </form>

            <p className="text-xs text-muted-foreground text-center">
              –í–∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º–µ —à—Ç–æ —ò–∞ –∏–∑–±–∏—Ä–∞—Ç–µ Charm Catalog. –å–µ –≤–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞–º–µ
              –≤–µ–¥–Ω–∞—à –ø–æ —Ä–∞–∑–≥–ª–µ–¥—É–≤–∞—ö–µ—Ç–æ –Ω–∞ –≤–∞—à–∞—Ç–∞ –Ω–∞—Ä–∞—á–∫–∞.
            </p>
          </div>
        )}
      </SheetContent>
    </Sheet>
  );
}
